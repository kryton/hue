{"body":"<div><div id=\"decimal\"><div class=\"hue-doc-title\">DECIMAL Data Type (Impala 3.0 or higher only)</div><div><p>\n      The <span class=\"hue-doc-codeph\">DECIMAL</span> data type is a numeric data type with fixed scale and\n      precision.\n    </p><p>\n      The data type is useful for storing and doing operations on precise decimal values.\n    </p><p id=\"syntax_blurb\"><b>Syntax:</b></p><div class=\"hue-doc-codeblock\">DECIMAL[(<span class=\"hue-doc-varname\">precision</span>[, <span class=\"hue-doc-varname\">scale</span>])]</div><p><b>Precision:</b></p><p><span class=\"hue-doc-varname\">precision</span> represents the total number of digits that can be represented\n      regardless of the location of the decimal point.\n    </p><p>\n      This value must be between 1 and 38, specified as an integer literal.\n    </p><p>\n      The default precision is 9.\n    </p><p><b>Scale:</b></p><p><span class=\"hue-doc-varname\">scale</span> represents the number of fractional digits.\n    </p><p>\n      This value must be less than or equal to the precision, specified as an integer literal.\n    </p><p>\n      The default scale is 0.\n    </p><p>\n      When the precision and the scale are omitted, a <span class=\"hue-doc-codeph\">DECIMAL</span> is treated as\n      <span class=\"hue-doc-codeph\">DECIMAL(9, 0)</span>.\n    </p><p><b>Range:</b></p><p>\n      The range of <span class=\"hue-doc-codeph\">DECIMAL</span> type is -10^38 +1 through 10^38 â€“1.\n    </p><p>\n      The largest value is represented by <span class=\"hue-doc-codeph\">DECIMAL(38, 0)</span>.\n    </p><p>\n      The most precise fractional value (between 0 and 1, or 0 and -1) is represented by\n      <span class=\"hue-doc-codeph\">DECIMAL(38, 38)</span>, with 38 digits to the right of the decimal point. The\n      value closest to 0 would be .0000...1 (37 zeros and the final 1). The value closest to 1\n      would be .999... (9 repeated 38 times).\n    </p><p><b>Memory and disk storage:</b></p><p>\n      Only the precision determines the storage size for <span class=\"hue-doc-codeph\">DECIMAL</span> values, and\n      the scale setting has no effect on the storage size. The following table describes the\n      in-memory storage once the values are loaded into memory.\n    </p><p><table id=\"simpletable_tty_3y2_mdb\"><tr class=\"hue-doc-sthead\"><td>Precision</td><td>In-memory Storage</td></tr><tr><td>1 - 9</td><td>4 bytes</td></tr><tr><td>10 - 18</td><td>8 bytes</td></tr><tr><td>19 - 38</td><td>16 bytes</td></tr></table></p><p>\n      The on-disk representation varies depending on the file format of the table.\n    </p><p>\n      Text, RCFile, and SequenceFile tables use ASCII-based formats as below:\n    </p><p><ul><li>\n          Leading zeros are not stored.\n        </li><li>\n          Trailing zeros are stored.\n        </li><li><p>\n            Each <span class=\"hue-doc-codeph\">DECIMAL</span> value takes up as many bytes as the precision of the\n            value, plus:\n          </p><ul><li>\n              One extra byte if the decimal point is present.\n            </li><li>\n              One extra byte for negative values.\n            </li></ul></li></ul></p><p>\n      Parquet and Avro tables use binary formats and offer more compact storage for\n      <span class=\"hue-doc-codeph\">DECIMAL</span> values. In these tables, Impala stores each value in fewer bytes\n      where possible depending on the precision specified for the <span class=\"hue-doc-codeph\">DECIMAL</span>\n      column. To conserve space in large tables, use the smallest-precision\n      <span class=\"hue-doc-codeph\">DECIMAL</span> type.\n    </p><p><b>Precision and scale in arithmetic operations:</b></p><p>\n      For all arithmetic operations, the resulting precision is at most 38.\n    </p><p>\n      If the resulting precision would be greater than 38, Impala truncates the result from the\n      back, but keeps at least 6 fractional digits in scale and rounds.\n    </p><p>\n      For example, <span class=\"hue-doc-codeph\">DECIMAL(38, 20) * DECIMAL(38, 20)</span> returns\n      <span class=\"hue-doc-codeph\">DECIMAL(38, 6)</span>. According to the table below, the resulting precision and\n      scale would be <span class=\"hue-doc-codeph\">(77, 40)</span>, but they are higher than the maximum precision\n      and scale for <span class=\"hue-doc-codeph\">DECIMAL</span>. So, Impala sets the precision to the maximum\n      allowed 38, and truncates the scale to 6.\n    </p><p>\n      When you use <span class=\"hue-doc-codeph\">DECIMAL</span> values in arithmetic operations, the precision and\n      scale of the result value are determined as follows. For better readability, the following\n      terms are used in the table below:\n      <ul><li><p>\n            P1, P2: Input precisions\n          </p></li><li><p>\n            S1, S2: Input scales\n          </p></li><li><p>\n            L1, L2: Leading digits in input <span class=\"hue-doc-codeph\">DECIMAL</span>s, i.e., L1 = P1 - S1 and L2\n            = P2 - S2\n          </p></li></ul></p><p><table id=\"table_inl_sz2_mdb\"><tbody><tr><td><b>Operation</b></td><td><b>Resulting Precision</b></td><td><b>Resulting Scale</b></td></tr><tr><td>\n                Addition and Subtraction\n              </td><td><p>\n                  max (L1, L2) + max (S1, S2) + 1\n                </p><p>\n                  1 is for carry-over.\n                </p></td><td>\n                max (S1, S2)\n              </td></tr><tr><td>\n                Multiplication\n              </td><td>\n                P1 + P2 + 1\n              </td><td>\n                S1 + S2\n              </td></tr><tr><td>\n                Division\n              </td><td>\n                L1 + S2 + max (S1 + P2 + 1, 6)\n              </td><td>\n                max (S1 + P2 + 1, 6)\n              </td></tr><tr><td>\n                Modulo\n              </td><td>\n                min (L1, L2) + max (S1, S2)\n              </td><td>\n                max (S1, S2)\n              </td></tr></tbody></table></p><p><b>Precision and scale in functions:</b></p><p>\n      When you use <span class=\"hue-doc-codeph\">DECIMAL</span> values in built-in functions, the precision and\n      scale of the result value are determined as follows:\n      <ul><li>\n          The result of the <span class=\"hue-doc-codeph\">SUM</span> aggregate function on a\n          <span class=\"hue-doc-codeph\">DECIMAL</span> value is:\n          <ul><li><p>\n                Precision: 38\n              </p></li><li><p>\n                Scale: The same scale as the input column\n              </p></li></ul></li><li><p>\n            The result of <span class=\"hue-doc-codeph\">AVG</span> aggregate function on a <span class=\"hue-doc-codeph\">DECIMAL</span>\n            value is:\n          </p><ul><li><p>\n                Precision: 38\n              </p></li><li><p>\n                Scale: max(Scale of input column, 6)\n              </p></li></ul></li></ul></p><p><b>Implicit conversions in DECIMAL assignments:</b></p><p>\n      Impala enforces strict conversion rules in decimal assignments like in\n      <span class=\"hue-doc-codeph\">INSERT</span> and <span class=\"hue-doc-codeph\">UNION</span> statements, or in functions like\n      <span class=\"hue-doc-codeph\">COALESCE</span>.\n    </p><p>\n      If there is not enough precision and scale in the destination, Impala fails with an error.\n    </p><p>\n      Impala performs implicit conversions between <span class=\"hue-doc-codeph\">DECIMAL</span> and other numeric\n      types as below:\n      <ul><li><span class=\"hue-doc-codeph\">DECIMAL</span> is implicitly converted to <span class=\"hue-doc-codeph\">DOUBLE</span> or\n          <span class=\"hue-doc-codeph\">FLOAT</span> when necessary even with a loss of precision. It can be\n          necessary, for example when inserting a <span class=\"hue-doc-codeph\">DECIMAL</span> value into a\n          <span class=\"hue-doc-codeph\">DOUBLE</span> column. For example:\n<div class=\"hue-doc-codeblock\">CREATE TABLE flt(c FLOAT);\nINSERT INTO flt SELECT CAST(1e37 AS DECIMAL(38, 0));\nSELECT CAST(c AS DECIMAL(38, 0)) FROM flt;\n\nResult: 9999999933815812510711506376257961984</div><p>\n            The result has a loss of information due to implicit casting. This is why we\n            discourage using the <span class=\"hue-doc-codeph\">DOUBLE</span> and <span class=\"hue-doc-codeph\">FLOAT</span> types in\n            general.\n          </p></li><li><span class=\"hue-doc-codeph\">DOUBLE</span> and <span class=\"hue-doc-codeph\">FLOAT</span> cannot be implicitly converted to\n          <span class=\"hue-doc-codeph\">DECIMAL</span>. An error is returned.\n        </li><li><span class=\"hue-doc-codeph\">DECIMAL</span> is implicitly converted to <span class=\"hue-doc-codeph\">DECIMAL</span> if all\n          digits fit in the resulting <span class=\"hue-doc-codeph\">DECIMAL</span>.\n          <p>\n            For example, the following query returns an error because the resulting type that\n            guarantees that all digits fit cannot be determined .\n<div class=\"hue-doc-codeblock\">SELECT GREATEST (CAST(1 AS DECIMAL(38, 0)), CAST(2 AS DECIMAL(38, 37)));</div></p></li><li>\n          Integer values can be implicitly converted to <span class=\"hue-doc-codeph\">DECIMAL</span> when there is\n          enough room in the <span class=\"hue-doc-codeph\">DECIMAL</span> to guarantee that all digits fit. The\n          integer types require the following numbers of digits to the left of the decimal point\n          when converted to <span class=\"hue-doc-codeph\">DECIMAL</span>:\n          <ul><li><p><span class=\"hue-doc-codeph\">BIGINT</span>: 19 digits\n              </p></li><li><p><span class=\"hue-doc-codeph\">INT</span>: 10 digits\n              </p></li><li><p><span class=\"hue-doc-codeph\">SMALLINT</span>: 5 digits\n              </p></li><li><p><span class=\"hue-doc-codeph\">TINYINT</span>: 3 digits\n              </p></li></ul><p>\n            For example:\n          </p><p><div class=\"hue-doc-codeblock\">CREATE TABLE decimals_10_8 (x DECIMAL(10, 8));\nINSERT INTO decimals_10_8 VALUES (CAST(1 AS TINYINT));</div></p><p>\n            The above <span class=\"hue-doc-codeph\">INSERT</span> statement fails because <span class=\"hue-doc-codeph\">TINYINT</span>\n            requires room for 3 digits to the left of the decimal point in the\n            <span class=\"hue-doc-codeph\">DECIMAL</span>.\n          </p><p><div class=\"hue-doc-codeblock\">CREATE TABLE decimals_11_8(x DECIMAL(11, 8));\nINSERT INTO decimals_11_8 VALUES (CAST(1 AS TINYINT));</div></p><p>\n            The above <span class=\"hue-doc-codeph\">INSERT</span> statement succeeds because there is enough room\n            for 3 digits to the left of the decimal point that <span class=\"hue-doc-codeph\">TINYINT</span>\n            requires.\n          </p></li></ul></p><p>\n      In <span class=\"hue-doc-codeph\">UNION</span>, the resulting precision and scales are determined as follows.\n      <ul><li>\n          Precision: max (L1, L2) + max (S1, S2)\n          <p>\n            If the resulting type does not fit in the <span class=\"hue-doc-codeph\">DECIMAL</span> type, an error is\n            returned. See the first example below.\n          </p></li><li>\n          Scale: max (S1, S2)\n        </li></ul></p><p>\n      Examples for <span class=\"hue-doc-codeph\">UNION</span>:\n      <ul><li><span class=\"hue-doc-codeph\">DECIMAL(20, 0) UNION DECIMAL(20, 20)</span> would require a\n          <span class=\"hue-doc-codeph\">DECIMAL(40, 20)</span> to fit all the digits. Since this is larger than the\n          max precision for <span class=\"hue-doc-codeph\">DECIMAL</span>, Impala returns an error. One way to fix\n          the error is to cast both operands to the desired type, for example\n          <span class=\"hue-doc-codeph\">DECIMAL(38, 18)</span>.\n        </li><li><p><span class=\"hue-doc-codeph\">DECIMAL(20, 2) UNION DECIMAL(8, 6)</span> returns <span class=\"hue-doc-codeph\">DECIMAL(24,\n            6)</span>.\n          </p></li><li><p><span class=\"hue-doc-codeph\">INT UNION DECIMAL(9, 4)</span> returns <span class=\"hue-doc-codeph\">DECIMAL(14, 4)</span>.\n          </p><p><span class=\"hue-doc-codeph\">INT</span> has the precision 10 and the scale 0, so it is treated as\n            <span class=\"hue-doc-codeph\">DECIMAL(10, 0) UNION DECIMAL(9. 4)</span>.\n          </p></li></ul></p><p><b>Casting between DECIMAL and other data types:</b></p><p>\n      To avoid potential conversion errors, use <span class=\"hue-doc-codeph\">CAST</span> to explicitly convert\n      between <span class=\"hue-doc-codeph\">DECIMAL</span> and other types in decimal assignments like in\n      <span class=\"hue-doc-codeph\">INSERT</span> and <span class=\"hue-doc-codeph\">UNION</span> statements, or in functions like\n      <span class=\"hue-doc-codeph\">COALESCE</span>:\n      <ul><li><p>\n            You can cast the following types to <span class=\"hue-doc-codeph\">DECIMAL</span>:\n            <span class=\"hue-doc-codeph\">FLOAT</span>, <span class=\"hue-doc-codeph\">TINYINT</span>, <span class=\"hue-doc-codeph\">SMALLINT</span>,\n            <span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>, <span class=\"hue-doc-codeph\">STRING</span></p></li><li><p>\n            You can cast <span class=\"hue-doc-codeph\">DECIMAL</span> to the following types:\n            <span class=\"hue-doc-codeph\">FLOAT</span>, <span class=\"hue-doc-codeph\">TINYINT</span>, <span class=\"hue-doc-codeph\">SMALLINT</span>,\n            <span class=\"hue-doc-codeph\">INT</span>, <span class=\"hue-doc-codeph\">BIGINT</span>, <span class=\"hue-doc-codeph\">STRING</span>,\n            <span class=\"hue-doc-codeph\">BOOLEAN</span>, <span class=\"hue-doc-codeph\">TIMESTAMP</span></p></li></ul></p><p>\n      Impala performs <span class=\"hue-doc-codeph\">CAST</span> between <span class=\"hue-doc-codeph\">DECIMAL</span> and other numeric\n      types as below:\n      <ul><li><p>\n            Precision: If you cast a value with bigger precision than the precision of the\n            destination type, Impala returns an error. For example, <span class=\"hue-doc-codeph\">CAST(123456 AS\n            DECIMAL(3,0))</span> returns an error because all digits do not fit into\n            <span class=\"hue-doc-codeph\">DECIMAL(3, 0)</span></p></li><li><p>\n            Scale: If you cast a value with more fractional digits than the scale of the\n            destination type, the fractional digits are rounded. For example, <span class=\"hue-doc-codeph\">CAST(1.239\n            AS DECIMAL(3, 2))</span> returns <span class=\"hue-doc-codeph\">1.24</span>.\n          </p></li></ul></p><p><b>Casting STRING to DECIMAL:</b></p><p>\n      You can cast <span class=\"hue-doc-codeph\">STRING</span> of numeric characters in columns, literals, or\n      expressions to <span class=\"hue-doc-codeph\">DECIMAL</span> as long as number fits within the specified target\n      <span class=\"hue-doc-codeph\">DECIMAL</span> type without overflow.\n      <ul><li><p>\n            If scale in <span class=\"hue-doc-codeph\">STRING</span> &gt; scale in <span class=\"hue-doc-codeph\">DECIMAL</span>, the\n            fractional digits are rounded to the <span class=\"hue-doc-codeph\">DECIMAL</span> scale.\n          </p><p>\n            For example, <span class=\"hue-doc-codeph\">CAST('98.678912' AS DECIMAL(15, 1))</span> returns\n            <span class=\"hue-doc-codeph\">98.7</span>.\n          </p></li><li><p>\n            If # leading digits in <span class=\"hue-doc-codeph\">STRING</span> &gt; # leading digits in\n            <span class=\"hue-doc-codeph\">DECIMAL</span>, an error is returned.\n          </p><p>\n            For example, <span class=\"hue-doc-codeph\">CAST('123.45' AS DECIMAL(2, 2))</span> returns an error.\n          </p></li></ul></p><p>\n      Exponential notation is supported when casting from <span class=\"hue-doc-codeph\">STRING</span>.\n    </p><p>\n      For example, <span class=\"hue-doc-codeph\">CAST('1.0e6' AS DECIMAL(32, 0))</span> returns\n      <span class=\"hue-doc-codeph\">1000000</span>.\n    </p><p>\n      Casting any non-numeric value, such as <span class=\"hue-doc-codeph\">'ABC'</span> to the\n      <span class=\"hue-doc-codeph\">DECIMAL</span> type returns an error.\n    </p><p><b>Casting DECIMAL to TIMESTAMP:</b></p><p>\n      Casting a <span class=\"hue-doc-codeph\">DECIMAL</span> value N to <span class=\"hue-doc-codeph\">TIMESTAMP</span> produces a value\n      that is N seconds past the start of the epoch date (January 1, 1970).\n    </p><p><b>DECIMAL vs FLOAT consideration:</b></p><p>\n      The <span class=\"hue-doc-codeph\">FLOAT</span> and <span class=\"hue-doc-codeph\">DOUBLE</span> types can cause problems or\n      unexpected behavior due to inability to precisely represent certain fractional values, for\n      example dollar and cents values for currency. You might find output values slightly\n      different than you inserted, equality tests that do not match precisely, or unexpected\n      values for <span class=\"hue-doc-codeph\">GROUP BY</span> columns. The <span class=\"hue-doc-codeph\">DECIMAL</span> type can help\n      reduce unexpected behavior and rounding errors, but at the expense of some performance\n      overhead for assignments and comparisons.\n    </p><p><b>Literals and expressions:</b></p><p><ul><li><p>\n            Numeric literals without a decimal point\n          </p><ul><li>\n              The literals are treated as the smallest integer that would fit the literal. For\n              example, <span class=\"hue-doc-codeph\">111</span> is a <span class=\"hue-doc-codeph\">TINYINT</span>, and\n              <span class=\"hue-doc-codeph\">1111</span> is a <span class=\"hue-doc-codeph\">SMALLINT</span>.\n            </li><li>\n              Large literals that do not fit into any integer type are treated as\n              <span class=\"hue-doc-codeph\">DECIMAL</span>.\n            </li><li>\n              The literals too large to fit into a <span class=\"hue-doc-codeph\">DECIMAL(38, 0)</span> are treated\n              as <span class=\"hue-doc-codeph\">DOUBLE</span>.\n            </li></ul></li><li><p>\n            Numeric literals with a decimal point\n          </p><ul><li>\n              The literal with less than 38 digits are treated as <span class=\"hue-doc-codeph\">DECIMAL</span>.\n            </li><li>\n              The literals with 38 or more digits are treated as a <span class=\"hue-doc-codeph\">DOUBLE</span>.\n            </li></ul></li><li>\n          Exponential notation is supported in <span class=\"hue-doc-codeph\">DECIMAL</span> literals.\n        </li><li><p>\n            To represent a very large or precise <span class=\"hue-doc-codeph\">DECIMAL</span> value as a literal,\n            for example one that contains more digits than can be represented by a\n            <span class=\"hue-doc-codeph\">BIGINT</span> literal, use a quoted string or a floating-point value for\n            the number and <span class=\"hue-doc-codeph\">CAST</span> the string to the desired\n            <span class=\"hue-doc-codeph\">DECIMAL</span> type.\n          </p><p>\n            For example: <span class=\"hue-doc-codeph\">CAST('999999999999999999999999999999' AS DECIMAL(38,\n            5)))</span></p></li></ul></p><p id=\"file_format_blurb\"><b>File format considerations:</b></p><p>\n      The <span class=\"hue-doc-codeph\">DECIMAL</span> data type can be stored in any of the file formats supported\n      by Impala.\n      <ul><li><p>\n            Impala can query Avro, RCFile, or SequenceFile tables that contain\n            <span class=\"hue-doc-codeph\">DECIMAL</span> columns, created by other Hadoop components.\n          </p></li><li><p>\n            Impala can query and insert into Kudu tables that contain <span class=\"hue-doc-codeph\">DECIMAL</span>\n            columns.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">DECIMAL</span> data type is fully compatible with HBase tables.\n          </p></li><li><p>\n            The <span class=\"hue-doc-codeph\">DECIMAL</span> data type is fully compatible with Parquet tables.\n          </p></li><li><p>\n            Values of the <span class=\"hue-doc-codeph\">DECIMAL</span> data type are potentially larger in text\n            tables than in tables using Parquet or other binary formats.\n          </p></li></ul></p><p><b>UDF consideration:</b></p><p>\n      When writing a C++ UDF, use the <span class=\"hue-doc-codeph\">DecimalVal</span> data type defined in\n      <span class=\"hue-doc-filepath\">/usr/include/impala_udf/udf.h</span>.\n    </p><p><b>Changing precision and scale:</b></p><p>\n      You can issue an <span class=\"hue-doc-codeph\">ALTER TABLE ... REPLACE COLUMNS</span> statement to change the\n      precision and scale of an existing <span class=\"hue-doc-codeph\">DECIMAL</span> column.\n      <ul><li><p>\n            For text-based formats (text, RCFile, and SequenceFile tables)\n          </p><ul><li><p>\n                If the values in the column fit within the new precision and scale, they are\n                returned correctly by a query.\n              </p></li><li><p>\n                If any values that do not fit within the new precision and scale:\n                <ul><li>\n                    Impala returns an error if the query option <span class=\"hue-doc-codeph\">ABORT_ON_ERROR</span>\n                    is set to <span class=\"hue-doc-codeph\">true</span>.\n                  </li><li>\n                    Impala returns a <span class=\"hue-doc-codeph\">NULL</span> and warning that conversion failed if\n                    the query option <span class=\"hue-doc-codeph\">ABORT_ON_ERROR</span> is set to\n                    <span class=\"hue-doc-codeph\">false</span>.\n                  </li></ul></p></li><li><p>\n                Leading zeros do not count against the precision value, but trailing zeros after\n                the decimal point do.\n              </p></li></ul></li><li><p>\n            For binary formats (Parquet and Avro tables)\n          </p><ul><li><p>\n                Although an <span class=\"hue-doc-codeph\">ALTER TABLE ... REPLACE COLUMNS</span> statement that\n                changes the precision or scale of a <span class=\"hue-doc-codeph\">DECIMAL</span> column succeeds,\n                any subsequent attempt to query the changed column results in a fatal error.\n                This is because the metadata about the columns is stored in the data files\n                themselves, and <span class=\"hue-doc-codeph\">ALTER TABLE</span> does not actually make any updates\n                to the data files. The other unaltered columns can still be queried\n                successfully.\n              </p></li><li><p>\n                If the metadata in the data files disagrees with the metadata in the metastore\n                database, Impala cancels the query.\n              </p></li></ul></li></ul></p><p id=\"partitioning_blurb\"><b>Partitioning:</b></p><p>\n      Using a <span class=\"hue-doc-codeph\">DECIMAL</span> column as a partition key provides you a better match\n      between the partition key values and the HDFS directory names than using a\n      <span class=\"hue-doc-codeph\">DOUBLE</span> or <span class=\"hue-doc-codeph\">FLOAT</span> partitioning column.\n    </p><p><b>Column statistics considerations:</b></p><p>\n      Because the <span class=\"hue-doc-codeph\">DECIMAL</span> type has a fixed size, the maximum and average size\n      fields are always filled in for column statistics, even before you run the <span class=\"hue-doc-codeph\">COMPUTE\n      STATS</span> statement.\n    </p><p><b>Compatibility with older version of DECIMAL:</b></p><p>\n      This version of <span class=\"hue-doc-codeph\">DECIMAL</span> type is the default in\n      Impala 3.0 and higher. The key differences between this\n      version of <span class=\"hue-doc-codeph\">DECIMAL</span> and the previous <span class=\"hue-doc-codeph\">DECIMAL</span> V1 in Impala\n      2.x include the following.\n    </p><p><table id=\"simpletable_bwl_khm_rdb\"><tr class=\"hue-doc-sthead\"><td/><td>DECIMAL in Impala 3.0 or\n            higher</td><td>DECIMAL in Impala 2.12 or lower\n          </td></tr><tr><td>Overall behavior</td><td>Returns either the result or an error.</td><td>Returns either the result or <span class=\"hue-doc-codeph\">NULL</span> with a\n            warning.</td></tr><tr><td>Overflow behavior</td><td>Aborts with an error.</td><td>Issues a warning and returns <span class=\"hue-doc-codeph\">NULL</span>.</td></tr><tr><td>Truncation / rounding behavior in arithmetic</td><td>Truncates and rounds digits from the back.</td><td>Truncates digits from the front.</td></tr><tr><td>String cast</td><td>Truncates from the back and rounds.</td><td>Truncates from the back.</td></tr></table></p><p>\n      If you need to continue using the first version of the <span class=\"hue-doc-codeph\">DECIMAL</span> type for\n      the backward compatibility of your queries, set the <span class=\"hue-doc-codeph\">DECIMAL_V2</span> query\n      option to <span class=\"hue-doc-codeph\">FALSE</span>:\n<div class=\"hue-doc-codeblock\">SET DECIMAL_V2=FALSE;</div></p><p><b>Compatibility with other databases:</b></p><p>\n      Use the <span class=\"hue-doc-codeph\">DECIMAL</span> data type in Impala for applications where you used the\n      <span class=\"hue-doc-codeph\">NUMBER</span> data type in Oracle.\n    </p><p>\n      The Impala <span class=\"hue-doc-codeph\">DECIMAL</span> type does not support the Oracle idioms of\n      <span class=\"hue-doc-codeph\">*</span> for scale.\n    </p><p>\n      The Impala <span class=\"hue-doc-codeph\">DECIMAL</span> type does not support negative values for precision.\n    </p></div></div></div>","title":"DECIMAL Data Type (Impala 3.0 or higher only)"}