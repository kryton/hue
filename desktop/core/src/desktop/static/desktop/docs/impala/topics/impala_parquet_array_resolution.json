{"body":"<div><div id=\"parquet_array_resolution\"><div class=\"hue-doc-title\">    PARQUET_ARRAY_RESOLUTION Query Option (Impala 2.9 or higher only)\n  </div><div><p>\n      The <span class=\"hue-doc-codeph\">PARQUET_ARRAY_RESOLUTION</span> query option controls the\n      behavior of the indexed-based resolution for nested arrays in Parquet.\n    </p><p>\n      In Parquet, you can represent an array using a 2-level or 3-level\n      representation. The modern, standard representation is 3-level. The legacy\n      2-level scheme is supported for compatibility with older Parquet files.\n      However, there is no reliable metadata within Parquet files to indicate\n      which encoding was used. It is even possible to have mixed encodings within\n      the same file if there are multiple arrays. The\n      <span class=\"hue-doc-codeph\">PARQUET_ARRAY_RESOLUTION</span> option controls the process of\n      resolution that is to match every column/field reference from a query to a\n      column in the Parquet file.</p><p>\n      The supported values for the query option are:\n    </p><ul><li><span class=\"hue-doc-codeph\">THREE_LEVEL</span>: Assumes arrays are encoded with the 3-level\n        representation, and does not attempt the 2-level resolution.\n      </li><li><span class=\"hue-doc-codeph\">TWO_LEVEL</span>: Assumes arrays are encoded with the 2-level\n        representation, and does not attempt the 3-level resolution.\n      </li><li><span class=\"hue-doc-codeph\">TWO_LEVEL_THEN_THREE_LEVEL</span>: First tries to resolve\n        assuming a 2-level representation, and if unsuccessful, tries a 3-level\n        representation.\n      </li></ul><p>\n      All of the above options resolve arrays encoded with a single level.\n    </p><p>\n      A failure to resolve a column/field reference in a query with a given array\n      resolution policy does not necessarily result in a warning or error returned\n      by the query. A mismatch might be treated like a missing column (returns\n      NULL values), and it is not possible to reliably distinguish the 'bad\n      resolution' and 'legitimately missing column' cases.\n    </p><p>\n      The name-based policy generally does not have the problem of ambiguous\n      array representations. You specify to use the name-based policy by setting\n      the <span class=\"hue-doc-codeph\">PARQUET_FALLBACK_SCHEMA_RESOLUTION</span> query option to\n      <span class=\"hue-doc-codeph\">NAME</span>.\n    </p><p><b>Type:</b> Enum of <span class=\"hue-doc-codeph\">TWO_LEVEL</span>,\n        <span class=\"hue-doc-codeph\">TWO_LEVEL_THEN_THREE_LEVEL</span>, and\n        <span class=\"hue-doc-codeph\">THREE_LEVEL</span></p><p><b>Default:</b><span class=\"hue-doc-codeph\">THREE_LEVEL</span></p><p id=\"added_in_290\"><b>Added in:</b>Impala 2.9.0</p><p id=\"example_blurb\"><b>Examples:</b></p><p>\n      EXAMPLE A: The following Parquet schema of a file can be interpreted as a\n      2-level or 3-level:\n    </p><div class=\"hue-doc-codeblock\">ParquetSchemaExampleA {\n  optional group single_element_groups (LIST) {\n    repeated group single_element_group {\n      required int64 count;\n    }\n  }\n}\n</div><p>\n      The following table schema corresponds to a 2-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE t (col1 array&lt;struct&lt;f1: bigint&gt;&gt;) STORED AS PARQUET;\n</div><p>\n      Successful query with a 2-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">SET PARQUET_ARRAY_RESOLUTION=TWO_LEVEL;\nSELECT ITEM.f1 FROM t.col1;\n</div><p>\n      The following table schema corresponds to a 3-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE t (col1 array&lt;bigint&gt;) STORED AS PARQUET;\n</div><p>\n      Successful query with a 3-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">SET PARQUET_ARRAY_RESOLUTION=THREE_LEVEL;\nSELECT ITEM FROM t.col1\n</div><p>\n      EXAMPLE B: The following Parquet schema of a file can be only be successfully\n      interpreted as a 2-level:\n    </p><div class=\"hue-doc-codeblock\">ParquetSchemaExampleB {\n  required group list_of_ints (LIST) {\n    repeated int32 list_of_ints_tuple;\n  }\n}\n</div><p>\n      The following table schema corresponds to a 2-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">CREATE TABLE t (col1 array&lt;int&gt;) STORED AS PARQUET;\n</div><p>\n      Successful query with a 2-level interpretation:\n    </p><div class=\"hue-doc-codeblock\">SET PARQUET_ARRAY_RESOLUTION=TWO_LEVEL;\nSELECT ITEM FROM t.col1\n</div><p>\n      Unsuccessful query with a 3-level interpretation. The query returns\n      <span class=\"hue-doc-codeph\">NULL</span>s as if the column was missing in the file:\n    </p><div class=\"hue-doc-codeblock\">SET PARQUET_ARRAY_RESOLUTION=THREE_LEVEL;\nSELECT ITEM FROM t.col1\n</div></div></div></div>","title":"PARQUET_ARRAY_RESOLUTION Query Option (Impala 2.9 or higher only)"}